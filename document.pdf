
##### README file instructions #####

## Installation
1. Clone the repository
2. Install dependencies:
   use below commands open in terminal enter following commands to setup and run.
   
   1.git clone git@github.com:Azaruddin7882/uav_deconfliction_system.git
   
   2.cd uav_deconfliction_system

   3.pip install -r requirements.txt

   -> For MP4 export, FFmpeg must be installed system-wide (not just a Python package)
   4.sudo apt install ffmpeg

   5. python src/main.py
   6. check output folder inside that ouputs are generated for given inputs
   7. To run unitest cases follow below command
   8. python -m unittest tests/test_conflict.py


#### Desinged Approach and explained with real life example for every  software component. #####
### For core software component core/conflict.py 

-> The system checks if drones could come closer than 5 meters at any point during their flights.
-> It divides the flight time into 1-second chunks to check positions at regular intervals.
-> First eliminates drone pairs that won't fly at the same time 
-> For drones flying at the same time, compares their positions (x,y,z) AND timestamps to find conflicts.
-> When conflicts are found, records exactly when/where they occur and how close the drones get.

example calulation:

let us consider:

Drone P 
Flies from (0,0,0) at 10:00:00 to (10,10,10) at 10:00:10
Speed: 1 m/s

Drone O 
Flies from (5,5,5) at 10:00:05 to (15,15,15) at 10:00:15
Speed: 1 m/

Conflict Check at 10:00:07:

Drone P position: (7,7,7)

Drone O position: (7,7,7)

Distance: 0 meters (CONFLICT!) --- > collision
 
Out put looks in below format for above case:

{
  "time": "10:00:07",
  "location": (7,7,7), 
  "distance": 0.0,
  "conflicting_drone": "O"
}

other cases:
{
    "time": "2023-11-15T10:06:30",  ---> 30 seconds before collision
    "location": [6.5, 6.5, 6.5],
    "distance": 2.1,                 
    "conflicting_drone": "delivery_drone_55"
}

### For core/mission.py 

-> Turns a list of GPS coordinates (waypoints) into a smooth flight path, 
   like connecting dots to draw a route on a map.

-> Drones don't instantly go full speed they gradually accelerate and slow down when approaching stops.
-> Calculates exactly when the drone will be at every point along the path (down to the second), 
   so we know where it is at any moment.
-> It can tell you the drone's exact location if you ask "Where will it be at 2:15 PM?"
-> Reads and writes flight plans using standard JSON files, like saving a route in Google Maps.

Example: 

----> Imagine two drones flying in your neighborhood

    1.Pizza Drone

    Route: Pizza Shop (Point A) → Your Home (Point B)
    Schedule: 6:00 PM - 6:10 PM
    Path: Straight line at 100m height

    2. Amazon Drone
    Route: Warehouse → Neighbor's House
    Schedule: 6:05 PM - 6:15 PM
    Path: Crosses your drone's path at 100m height

    The written code does below actions

    -> Plans Your Drone's Trip
       Calculates exact positions every second:

       6:00 PM: At pizza shop (0,0,0)  
       6:05 PM: Halfway (5,5,100)  
       6:10 PM: Your home (10,10,0)

    -> Spots the Danger
       At 6:07 PM, both drones reach (7,7,100) at the same time ===>  CRASH!
       Outputs this warning:
       {
        "time": "6:07 PM",
        "location": [7,7,100],
        "distance": 0.0,  #  collision occurs 
        "conflicting_drone": "amazon_drone_123"
       }

    -> Gives Early Warnings
       At 6:06:30 PM, drones are 2m apart ==>risky:
       {
            "time": "6:06:30 PM", 
            "location": [6.5,6.5,100],
            "distance": 2.0,
            "conflicting_drone": "amazon_drone_123"
        }

    -> what we should do here
    Option 1: Delay your drone by 5 minutes
    Option 2: Change route to fly at 120m height instead
    Option 3: Pick a different path 

##### For utils software component utils/geometry.py #####

-> 3d distance calculation -> Measures straight-line distance between two points 
   in space (x,y,z coordinates)
-> 4D Distance (Space + Time) -> Combines physical distance AND time difference into one "danger score".
-> Time Weighting (Custom Danger Zone)
-> time_weight lets you decide how much to prioritize time vs. space.
-> Waypoint Interpolation (GPS Prediction)-> Predicts a drone's exact position between two known points at any given time.

Example:
the below code desinged in same as example 

1. Drone 1
Route: Warehouse → Customer's Home

Waypoints:
Start: (0, 0, 50m) at 10:00:00 AM
End: (100, 100, 50m) at 10:10:00 AM

2.Drone 2
Route: Store → Dropoff

Waypoints:
Start: (50, 50, 50m) at 10:05:00 AM
End: (150, 50, 50m) at 10:15:00 AM

Where Both Drones Are at 10:07:00 AM --- ?

Drone1:
Interpolated position: (70, 70, 50m)
Drone2:
Interpolated position: (90, 50, 50m)

-> 3d distance
distance_3d((70,70,50), (90,50,50)) 
= sqrt((90-70)² + (50-70)² + (50-50)²) 
= sqrt(400 + 400 + 0) 
= 28.28 meters

4D Distance (With Time Weight = 1)
Both drones are at 10:07:00 AM → 0 time difference
distance_4d = sqrt(28.28² + 0²) = 28.28 units

case-1 :Near-Miss at 10:07:30 AM
Drone1: (75, 75, 50m)
Drone2: (95, 50, 50m)

3D distance: 29.15m
Time difference: 0 seconds → Still safe

case-2: Danger Zone at 10:08:00 AM

Drone1: (80, 80, 50m)
Drone2: (100, 50, 50m)

3D distance: 36.06m
No time difference → Safe

Collision: Distance = 0m at the same time.
Near-Miss: Distance < safety buffer 
Safe: Distance ≥ safety buffer.


##### For utils software component visualization/plotter.py #####

-> 3D Mission Mapping
   Plots drone routes in 3D space (X,Y,Altitude) like a GPS map for aircraft.

-> Time Animation
    Shows drone movement second-by-second like a flight tracker.

-> Conflict Highlighting
    Marks dangerous spots where drones get too close.

-> Smart View Adjustment
    Automatically zooms to fit all flight paths with 20% padding.

-> Video Generation
    Creates MP4 videos of the simulation for review.

Example:

Drone1:
(0,0,50m) at 10:00 → (100,100,50m) at 10:10
Drone2:
(50,50,50m) at 10:05 → (150,50,50m) at 10:15

Drone-1 position (0 + (100-0)*(7/10), 0 + (100-0)*(7/10), 50) = (70,70,50)
Drone-2 position (50 + (150-50)*(2/10), 50, 50) = (70,50,50)
Distance check = sqrt((70-70)² + (70-50)² + (50-50)²) = 20m  # Safe if buffer=5m

o/p:
Blue line: Drone1 diagonal path
Red line: Drone2 's horizontal path
Yellow X: Appears if they come within 5m

##### For utils software component src/main.py #####

-> Program Flow(Load Mission Files)
   Reads primary_mission.json (drone1)
   Reads simulated_flights.json (drone2)
-> Generate Flight Paths
   Calculates exact positions every second
-> Conflict Detection
   Checks if drones come within 5m (safety buffer)
-> Visualization(creates):
    mission_plot.png: Static 3D map showing collision point
    mission_animation.mp4: Video of drone movements

##### For utils software component tests/test_conflict.py #####


Testing scenerios:
->Testing No Conflict (Safe Scenarios)
  To verify the system correctly identifies when drones won't collide.
    Example:
    Drone A flies left-to-right at 10 AM
    Drone B flies far away at 11 AM
    Should report no danger

-> Time Overlap But Safe Distance
   Confirms drones can fly at the same time if routes don't cross.
    Example:

    Drone A flies north path at 10 AM
    Drone B flies parallel south path at same time
    Safe despite same flight time

-> Conflict Detection (Catching Crashes)
   Ensures the system spots actual collisions.
    Example:

    Drone A crosses east-west at 10 AM
    Drone B crosses north-south through same point at same time
    Must detect this X-shaped collision

-> Same Location, Different Times
   Checks time separation prevents false alarms.
    Example:

    Both drones pass (50,50,50) but:
    Drone A at 10 AM
    Drone B at 3 PM
    Safe because of time gap

->  Vertical (Altitude) Conflicts
    Verifies 3D safety checks work up/down.
    Example:

    Drone A ascending through 90m
    Drone B descending through 90m at same time
    Must flag this elevator-style collision

-> Safety Buffer Accuracy
   Tests the 5m danger zone is respected.
    Example:

    Drones 5.1m apart → Safe (4.9m apart → Danger)
    Like testing a "no closer than 5m" forcefield

->Multiple Drone Conflicts
  Handles complex air traffic scenarios.
    Example:

    Your drone + 2 others crossing paths at different points
    Must catch all collision points

-> Invalid Mission Tests
   Catches user errors early:

    Single-waypoint missions (can't fly nowhere)
    End time before start time (time travel not allowed)
    Prevents impossible flight plans    
